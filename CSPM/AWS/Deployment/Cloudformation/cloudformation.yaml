AWSTemplateFormatVersion: 2010-09-09
Description: CSPM deployment template
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Coralogix Account
        Parameters:
          - applicationName
          - subsystemName
          - CompanyId
          - PrivateKey
          - AlertsPrivateKey
      - Label:
          default: CSPM
        Parameters:
          - CSPMVersion
          - GRPCEndpoint
          - TesterList
          - RegionList
          - cronjob
          - multiAccountsARNs
      - Label:
          default: EC2 Instance
        Parameters:
          - InstanceTypeParam
          - VolumeType
          - Encrypted
          - KeyName
      - Label:
          default: Networking
        Parameters:
          - VpcId
          - SubnetId
          - PublicAccess
          - PublicIPAddress
          - SecurityGroupId
    ParameterLabels:
          applicationName:
            default: Application Name
          subsystemName:
            default: Subsystem Name
          PrivateKey:
            default: API Private Key
          AlertsPrivateKey:
            default: Alerts API Private Key
          CompanyId:
            default: Company ID
          CSPMVersion:
            default: CSPM Version
          GRPCEndpoint:
            default: GRPC Endpoint
          TesterList:
            default: Tester List
          RegionList:
            default: Region List
          cronjob:
            default: CronJob
          InstanceTypeParam:
            default: Instance Type
          VolumeType:
            default: Volume Type
          Encrypted:
            default: Should volume be encrypted?
          KeyName:
            default: Key Name
          VpcId:
            default: VPC ID
          SubnetId:
            default: Subnet ID
          PublicAccess:
            default: Should the instance have a public IP address?
          PublicIPAddress:
            default: Your public IP address for the SSH access
          SecurityGroupId:
            default: Security Group ID
          multiAccountsARNs:
            default: ARN for one additional AWS account to scan
Mappings:
  GRPCRegionMap:
    Europe:
      GRPCurl: ng-api-grpc.coralogix.com
    Europe2:
      GRPCurl: ng-api-grpc.eu2.coralogix.com
    India:
      GRPCurl: ng-api-grpc.app.coralogix.in
    Singapore:
      GRPCurl: ng-api-grpc.coralogixsg.com
    US:
      GRPCurl: ng-api-grpc.coralogix.us
  RegionMap:
    us-east-1:        # N.Virginia
      AMI: ami-08c40ec9ead489470
    us-east-2:        # Ohio
      AMI: ami-097a2df4ac947655f
    us-west-1:        # N.California
      AMI: ami-02ea247e531eb3ce6
    us-west-2:        # Oregon
      AMI: ami-017fecd1353bcc96e
    ap-south-1:       # Mumbai
      AMI: ami-062df10d14676e201
    ap-northeast-1:   # Tokyo
      AMI: ami-09a5c873bc79530d9
    ap-northeast-2:   # Seoul
      AMI: ami-0e9bfdb247cc8de84
    ap-northeast-3:   # Osaka
      AMI: ami-08c2ee02329b72f26
    ap-southeast-1:   # Singapore
      AMI: ami-07651f0c4c315a529
    ap-southeast-2:   # Sydney
      AMI: ami-09a5c873bc79530d9
    ca-central-1:     # Canada
      AMI: ami-0a7154091c5c6623e
    eu-central-1:     # Frankfurt
      AMI: ami-0caef02b518350c8b
    eu-west-1:        # Ireland
      AMI: ami-096800910c1b781ba
    eu-west-2:        # London
      AMI: ami-0f540e9f488cfa27d
    eu-west-3:        # Paris
      AMI: ami-0493936afbe820b28
    eu-north-1:       # Stockholm
      AMI: ami-0efda064d1b5e46a5
    sa-east-1:        # SÃ£o Paulo
      AMI: ami-04b3c23ec8efcc2d6
Parameters:
  InstanceTypeParam:
    Description: EC2 Instance types
    Type: String
    Default: t3.small
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium
      - c4.large
      - m4.large
  CompanyId:
    Type: Number
    Description: Your company ID from your Coralogix account (Settings > Send your data)
  Encrypted:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  KeyName:
    Description: Name of an existing Key Pair to use for the CSPM EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
  cronjob:
    Description: Period to run the CSPM in crontab format
    Type: String
    Default: "0 0 * * *"
  GRPCEndpoint:
    Type: String
    Default: Europe
    AllowedValues:
      - Europe
      - Europe2
      - India
      - Singapore
      - US
  applicationName:
    Type: String
    Default: CSPM
    Description: Application name for Coralogix account
    MinLength: 1
    MaxLength: 64
  subsystemName:
    Type: String
    Default: CSPM
    Description: Subsystem name for Coralogix account
    MinLength: 1
    MaxLength: 64
  TesterList:
    Type: String
    Description: Optional - Test only specific services (Comma separated with no spaces)
  RegionList:
    Type: String
    Description: Optional - Test only specific regions (Comma separated with no spaces)
  PrivateKey:
    Type: String
    Description: The 'Send Your Data' API key from Coralogix account
    AllowedPattern: '[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}'
    ConstraintDescription: The PrivateKey should be valid UUID string
    MinLength: 36
    MaxLength: 36
    NoEcho: true
  AlertsPrivateKey:
    Type: String
    Description: Optional - The 'Alerts, Rules and Tags API Key' from Coralogix account
    ConstraintDescription: The AlertsPrivateKey should be valid UUID string
    MinLength: 36
    MaxLength: 36
  CSPMVersion:
    Type: String
    Default: latest
  VolumeType:
    Type: String
    Default: gp3
    AllowedValues:
      - gp2
      - gp3
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Type: AWS::EC2::Subnet::Id
  PublicAccess:
    Type: String
    Default: true
    Description: Allow or Deny public access to the CSPM EC2 instance (will get a public IP address from the subnet)
    AllowedValues:
      - true
      - false
  PublicIPAddress:
    Type: String
    Default: 0.0.0.0/0
    Description: Enter your public IP address to allow specific SSH access (e.g. 11.22.33.44/32)
  SecurityGroupId:
    Type: String
    Description: Optional - If no security group specified, a new one will be created
    Default: ""
  multiAccountsARNs:
    Type: String
    Description: Optional - add the ARN for one additional account that you wish to scan - refer to the CSPM documentation https://coralogix.com/docs/cloud-security-posture-cspm/
    Default: ""
Conditions:
  IsSecurityGroupEmpty: !Equals
    - !Ref SecurityGroupId
    - ""
  IsMultiAccountNotEmpty: !Not
    - !Equals
      - !Ref multiAccountsARNs
      - ""
Resources:
  CSPMEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceTypeParam
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - AMI
      Tags:
        - Key: "Name"
          Value: "Snowbit CSPM"
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash\n"
              - "sudo apt update\n"
              - "sudo apt-get remove docker docker-engine docker.io containerd runc\n"
              - "sudo apt-get install ca-certificates curl gnupg lsb-release\n"
              - "sudo mkdir -p /etc/apt/keyrings\n"
              - "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n"
              - "echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n"
              - "sudo apt update\n"
              - "sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y\n"
              - "crontab -l | { cat; echo \""
              - !Ref "cronjob"
              - " docker rm snowbit-cspm ; docker rmi coralogixrepo/snowbit-cspm ; docker run --name snowbit-cspm -d -e PYTHONUNBUFFERED=1 -e CLOUD_PROVIDER=\"aws\" -e AWS_DEFAULT_REGION=\"eu-west-1\" -e CORALOGIX_ENDPOINT_HOST="
              - !FindInMap [GRPCRegionMap, !Ref GRPCEndpoint, GRPCurl]
              - " -e APPLICATION_NAME="
              - !Ref "applicationName"
              - " -e CLOUD_PROVIDER=aws"
              - " -e COMPANY_ID="
              - !Ref "CompanyId"
              - " -e SUBSYSTEM_NAME="
              - !Ref "subsystemName"
              - " -e TESTER_LIST="
              - !Ref "TesterList"
              - " -e API_KEY="
              - !Ref "PrivateKey"
              - " -e REGION_LIST="
              - !Ref "RegionList"
              - " -e CORALOGIX_ALERT_API_KEY="
              - !Ref "AlertsPrivateKey"
              - " --network host"
              - " -v ~/.aws/credentials:/root/.aws/credentials coralogixrepo/snowbit-cspm:"
              - !Ref "CSPMVersion"
              - "\"; } | crontab - \n"
              - "docker pull coralogixrepo/snowbit-cspm:"
              - !Ref "CSPMVersion"
              - "\n"
              - "sudo usermod -aG docker ubuntu \n"
              - "newgrp docker \n"
              - "\n"
              - "docker rm snowbit-cspm ; docker rmi coralogixrepo/snowbit-cspm ; docker run --name snowbit-cspm -d -e PYTHONUNBUFFERED=1 -e CLOUD_PROVIDER=\"aws\" -e AWS_DEFAULT_REGION=\"eu-west-1\" -e CORALOGIX_ENDPOINT_HOST="
              - !FindInMap [ GRPCRegionMap, !Ref GRPCEndpoint, GRPCurl ]
              - " -e APPLICATION_NAME="
              - !Ref "applicationName"
              - " -e CLOUD_PROVIDER=aws"
              - " -e COMPANY_ID="
              - !Ref "CompanyId"
              - " -e SUBSYSTEM_NAME="
              - !Ref "subsystemName"
              - " -e TESTER_LIST="
              - !Ref "TesterList"
              - " -e API_KEY="
              - !Ref "PrivateKey"
              - " -e REGION_LIST="
              - !Ref "RegionList"
              - " -e CORALOGIX_ALERT_API_KEY="
              - !Ref "AlertsPrivateKey"
              - " --network host"
              - " -v ~/.aws/credentials:/root/.aws/credentials coralogixrepo/snowbit-cspm:"
              - !Ref "CSPMVersion"
      IamInstanceProfile: !Ref CSPMInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: !Ref VolumeType
            VolumeSize: 8
            Encrypted: !Ref Encrypted
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: !Ref PublicAccess
          SubnetId: !Ref SubnetId
          GroupSet:
            - !If [IsSecurityGroupEmpty, !Ref CSPMSecurityGroup, !Ref SecurityGroupId]
  CSPMSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsSecurityGroupEmpty
    Properties:
      GroupDescription: Enable SSH to the CSPM instance and internet connectivity
      GroupName: !Join ["-",["CSPM SG",!Ref AWS::StackName]]
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref PublicIPAddress
  CSPMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-",["CSPM-Role",!Ref AWS::StackName]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  CSPMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["-",["CSPM-Policy",!Ref AWS::StackName]]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CSPM
            Effect: Allow
            Action:
              - access-analyzer:Get*
              - access-analyzer:List*
              - acm:Describe*
              - apigateway:Get*
              - application-autoscaling:Describe*
              - autoscaling-plans:Describe*
              - autoscaling-plans:GetScalingPlanResourceForecastData
              - autoscaling:Describe*
              - autoscaling:GetPredictiveScalingForecast
              - cloudformation:BatchDescribeTypeConfigurations
              - cloudformation:Describe*
              - cloudformation:DetectStack*
              - cloudformation:EstimateTemplateCost
              - cloudformation:Get*
              - cloudformation:List*
              - cloudformation:ValidateTemplate
              - cloudfront:DescribeFunction
              - cloudfront:Get*
              - cloudfront:List*
              - cloudtrail:Describe*
              - cloudtrail:Get*
              - cloudtrail:List*
              - cloudtrail:LookupEvents
              - cloudwatch:Describe*
              - cloudwatch:Get*
              - cloudwatch:List*
              - codebuild:BatchGet*
              - codebuild:Describe*
              - codebuild:Get*
              - codebuild:List*
              - config:Describe*
              - config:Get*
              - config:List*
              - dms:Describe*
              - ec2:Describe*
              - ec2:ExportClientVpn*
              - ec2:Get*
              - ec2:List*
              - ec2:Search*
              - ec2messages:Get*
              - eks:Describe*
              - eks:List*
              - elasticache:Describe*
              - elasticache:List*
              - elasticloadbalancing:Describe*
              - elasticmapreduce:Describe*
              - elasticmapreduce:Get*
              - elasticmapreduce:List*
              - elasticmapreduce:ViewEventsFromAllClustersInConsole
              - emr-containers:Describe*
              - emr-containers:List*
              - emr-serverless:Get*
              - emr-serverless:List*
              - es:Describe*
              - es:Get*
              - es:List*
              - iam:Generate*
              - iam:Get*
              - iam:List*
              - iam:Simulate*
              - imagebuilder:Get*
              - imagebuilder:List*
              - kms:Describe*
              - kms:Get*
              - kms:List*
              - lambda:Get*
              - lambda:List*
              - network-firewall:Describe*
              - network-firewall:List*
              - organizations:Describe*
              - organizations:List*
              - rds:Describe*
              - redshift:Describe*
              - redshift:List*
              - redshift:ViewQueries*
              - rolesanywhere:Get*
              - rolesanywhere:list*
              - route53:Get*
              - route53:List*
              - route53:TestDNSAnswer
              - route53domains:CheckDomain*
              - route53domains:Get*
              - route53domains:List*
              - route53domains:ViewBilling
              - s3:Describe*
              - s3:List*
              - s3:GetBucketPublicAccessBlock
              - s3:GetBucketPolicyStatus
              - s3:GetEncryptionConfiguration
              - s3:GetAccountPublicAccessBlock
              - s3:GetBucketLogging
              - s3:GetBucketVersioning
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - s3:GetBucketPolicy
              - servicequotas:Get*
              - servicequotas:List*
              - ses:Describe*
              - ses:Get*
              - ses:List*
              - sns:Get*
              - sns:List*
              - sqs:Get*
              - sqs:List*
              - ssm:Describe*
              - ssm:Get*
              - ssm:List*
              - sts:Get*
              - tag:Get*
              - waf-regional:Get*
              - waf-regional:List*
              - waf:Get*
              - waf:List*
              - wafv2:Describe*
              - wafv2:Get*
              - wafv2:List*
            Resource: "*"
      Roles:
        - !Ref CSPMRole
  CSPMAssumeRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: IsMultiAccountNotEmpty
    Properties:
      ManagedPolicyName: !Join ["-",["CSPM-Assume-Role-Policy",!Ref AWS::StackName]]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CSPMAssumeRole
            Effect: Allow
            Action: sts:AssumeRole
            Resource:
             - !Ref multiAccountsARNs
      Roles:
        - !Ref CSPMRole
  CSPMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join ["-",["CSPMInstanceProfile",!Ref AWS::StackName]]
      Path: /
      Roles:
        - !Ref CSPMRole
